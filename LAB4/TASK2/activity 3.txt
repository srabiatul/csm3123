val rockPlanets = arrayOf<String>("Mercury", "Venus", "Earth", "Mars")
val gasPlanets = arrayOf("Jupiter", "Saturn", "Uranus", "Neptune")
val solarSystem = rockPlanets + gasPlanets

fun main(){
println(solarSystem[0])
println(solarSystem[1])
println(solarSystem[2])
println(solarSystem[3])
println(solarSystem[4])
println(solarSystem[5])
println(solarSystem[6])
println(solarSystem[7])
}

/*Mercury
Venus
Earth
Mars
Jupiter
Saturn
Uranus
Neptune*/

----

val rockPlanets = arrayOf<String>("Mercury", "Venus", "Earth", "Mars")
val gasPlanets = arrayOf("Jupiter", "Saturn", "Uranus", "Neptune")
val solarSystem = rockPlanets + gasPlanets

fun main(){
println(solarSystem[0])
println(solarSystem[1])
println(solarSystem[2])
println(solarSystem[3])
println(solarSystem[4])
println(solarSystem[5])
println(solarSystem[6])
println(solarSystem[7])

solarSystem[3] = "Little Earth"
println(solarSystem[3])

}

/*
Mercury
Venus
Earth
Mars
Jupiter
Saturn
Uranus
Neptune
Little Earth*/

---

val rockPlanets = arrayOf<String>("Mercury", "Venus", "Earth", "Mars")
val gasPlanets = arrayOf("Jupiter", "Saturn", "Uranus", "Neptune")
val newSolarSystem = arrayOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune", "Pluto")
val solarSystem = rockPlanets + gasPlanets

fun main(){
println(solarSystem[0])
println(solarSystem[1])
println(solarSystem[2])
println(solarSystem[3])
println(solarSystem[4])
println(solarSystem[5])
println(solarSystem[6])
println(solarSystem[7])

println(newSolarSystem[8])

}

/*Mercury
Venus
Earth
Mars
Jupiter
Saturn
Uranus
Neptune
Pluto*/

---

fun main() {
    val solarSystem = listOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
	println(solarSystem.size) 
}
//8

---

fun main() {
    val solarSystem = listOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
	println(solarSystem.size) 
    println(solarSystem[2])
    println(solarSystem.get(3))
    println(solarSystem.indexOf("Earth"))
    println(solarSystem.indexOf("Pluto"))
}
/*8
Earth
Mars
2
-1*/

---

fun main() {
    val solarSystem = listOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
	for (planet in solarSystem) {
    println(planet)
}
}
/*Mercury
Venus
Earth
Mars
Jupiter
Saturn
Uranus
Neptune*/

---

fun main() {
    val solarSystem = mutableListOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
    solarSystem.add("Pluto")
    solarSystem[3] = "Future Moon"
    println(solarSystem[3])
    println(solarSystem[8]) 
}

/*Future Moon
Pluto*/

---

fun main() {
    val solarSystem = mutableListOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
    solarSystem.add("Pluto")
    solarSystem[3] = "Future Moon"
    println(solarSystem[3])
    solarSystem.removeAt(8)
    solarSystem.remove("Future Moon")
    println(solarSystem[3])
	println(solarSystem.contains("Pluto"))
	println("Future Moon" in solarSystem)
}

/*Future Moon
Jupiter
false
false*/

---

fun main() {
    val solarSystem = mutableSetOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
	println(solarSystem.size)
	solarSystem.add("Pluto")
	println(solarSystem.size)
	println(solarSystem.contains("Pluto"))
}

/*8
9
true*/

---

fun main() {
    val solarSystem = mutableSetOf("Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune")
	println(solarSystem.size)
	solarSystem.add("Pluto")
	println(solarSystem.size)
	println(solarSystem.contains("Pluto"))
    solarSystem.remove("Pluto")
    println(solarSystem.size)
	println(solarSystem.contains("Pluto"))
}

/*8
9
true
8
false*/

---

fun main() {
    val solarSystem = mutableMapOf(
    "Mercury" to 0,
    "Venus" to 0,
    "Earth" to 1,
    "Mars" to 2,
    "Jupiter" to 79,
    "Saturn" to 82,
    "Uranus" to 27,
    "Neptune" to 14
)
    println(solarSystem.size)
    solarSystem["Pluto"] = 5
    println(solarSystem.size)
    println(solarSystem["Pluto"])
    println(solarSystem.get("Theia"))
    
    solarSystem.remove("Pluto")
    println(solarSystem.size)
    
    solarSystem["Jupiter"] = 78
	println(solarSystem["Jupiter"])
}

---


